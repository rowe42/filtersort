/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.admin.thebackend.service.gen.rest;

import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.data.repository.NoRepositoryBean;
import java.util.List;
import java.util.UUID;
import org.springframework.security.access.prepost.PreAuthorize;

import de.muenchen.testproject.admin.thebackend.service.gen.domain.DateEntity_;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by Barrakuda.
 */
@NoRepositoryBean
public interface Generated_DateEntity_Repository extends CrudRepository<DateEntity_, UUID> { //NOSONAR
	/**
	 * Name for the specific cache.
	 */
	String CACHE = "DATEENTITY_CACHE";
	
	/**
	 * Get all the DateEntity_ entities.
	 *
	 * @return an Iterable of the DateEntity_ entities with the same Tenancy.
	 */
	@Override
	Iterable<DateEntity_> findAll();
	
	/**
	 * Get one specific DateEntity_ by its unique oid.
	 *
	 * @param oid The identifier of the DateEntity_.
	 * @return The DateEntity_ with the requested oid.
	 */
	@Override
	@Cacheable(value = CACHE, key = "#p0", condition = "@repositoriesCacheProperties.dateEntityRepoActive")
	DateEntity_ findOne(UUID oid);
	
	/**
	 * Create or update a DateEntity_.
	 * <p>
	 * If the oid already exists, the DateEntity_ will be overridden, hence update.
	 * If the oid does no already exist, a new DateEntity_ will be created, hence create.
	 * </p>
	 *
	 * @param dateEntity The DateEntity_ that will be saved.
	 * @return the saved DateEntity_.
	 */
	@Override
	@CachePut(value = CACHE, key = "#p0.oid", condition = "@repositoriesCacheProperties.dateEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_WRITE_DateEntity.name(),'Entitlements')")
	<S extends DateEntity_> S save(S dateEntity);
	
	/**
	 * Delete the DateEntity_ by a specified oid.
	 *
	 * @param oid the unique oid of the DateEntity_ that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, key = "#p0", condition = "@repositoriesCacheProperties.dateEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_DateEntity.name(),'Entitlements')")
	void delete(UUID oid);
	
	/**
	 * Delete a DateEntity_ by entity.
	 *
	 * @param entity The DateEntity_ that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, key = "#p0.oid", condition = "@repositoriesCacheProperties.dateEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_DateEntity.name(),'Entitlements')")
	void delete(DateEntity_ entity);
	
	/**
	 * Delete multiple DateEntity_ entities by their oid.
	 *
	 * @param entities The Iterable of DateEntity_ entities that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, allEntries = true, condition = "@repositoriesCacheProperties.dateEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_DateEntity.name(),'Entitlements')")
	void delete(Iterable<? extends DateEntity_> entities);
	
	/**
	 * Delete all DateEntity_ entities.
	 */
	@Override
	@CacheEvict(value = CACHE, allEntries = true, condition = "@repositoriesCacheProperties.dateEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_DateEntity.name(),'Entitlements')")
	void deleteAll();
	
	List<DateEntity_> findByTheDate(@Param(value= "theDate") java.time.LocalDate theDate);
	List<DateEntity_> findByTheDateTime(@Param(value= "theDateTime") java.time.LocalDateTime theDateTime);
	List<DateEntity_> findByTheTime(@Param(value= "theTime") java.time.LocalTime theTime);
	
	
}
