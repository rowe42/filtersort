/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.admin.thebackend.service.gen.domain;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.DiscriminatorColumn;
import org.hibernate.search.annotations.Indexed;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import de.muenchen.testproject.commons.domain.BaseEntity;
import de.muenchen.testproject.admin.thebackend.service.gen.domain.validation.ConsistentAbstractEntity_;


/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by Barrakuda.
 */
/**
 * This class represents a AbstractEntity_.
 * <p>
 * Only oid and reference will be stored in the database.
 * The entity's content will be loaded according to the reference variable.
 * </p>
 */
@Entity
@Table(name = "abstractentity")
@ConsistentAbstractEntity_
// Inheritance
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name = "dtype")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "dtype")
@JsonSubTypes(value = {
		@JsonSubTypes.Type(name = FirstLevelEntity_.DTYPE, value = FirstLevelEntity_.class)
})
// Definition of getter, setter, ...
@NoArgsConstructor
@Getter
@Setter
@ToString(callSuper = true)
@EqualsAndHashCode(callSuper = true)
public abstract class AbstractEntity_ extends BaseEntity  {
	
	/**
	 * The type info for the {@link javax.persistence.DiscriminatorColumn}.
	 */
	@Column(name = "dtype", insertable = false, updatable = false)
	private String dtype;
	
	// ========= //
	// Variables //
	// ========= //
	
	@Column(name="text1", nullable=false, length=30)
	@NotNull
	@Size(min=2, max=30)
	private String text1;
	
	
}
