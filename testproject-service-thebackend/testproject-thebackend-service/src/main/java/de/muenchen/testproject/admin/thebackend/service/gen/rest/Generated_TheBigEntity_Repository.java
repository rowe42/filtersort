/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.admin.thebackend.service.gen.rest;

import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.data.repository.NoRepositoryBean;
import java.util.List;
import java.util.UUID;
import org.springframework.security.access.prepost.PreAuthorize;

import de.muenchen.testproject.admin.thebackend.service.gen.domain.TheBigEntity_;
import de.muenchen.testproject.admin.thebackend.service.gen.domain.TheBigEntity_InlineProjection;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by Barrakuda.
 */
@NoRepositoryBean
public interface Generated_TheBigEntity_Repository extends CrudRepository<TheBigEntity_, UUID> { //NOSONAR
	/**
	 * Name for the specific cache.
	 */
	String CACHE = "THEBIGENTITY_CACHE";
	
	/**
	 * Get all the TheBigEntity_ entities.
	 *
	 * @return an Iterable of the TheBigEntity_ entities with the same Tenancy.
	 */
	@Override
	Iterable<TheBigEntity_> findAll();
	
	/**
	 * Get one specific TheBigEntity_ by its unique oid.
	 *
	 * @param oid The identifier of the TheBigEntity_.
	 * @return The TheBigEntity_ with the requested oid.
	 */
	@Override
	@Cacheable(value = CACHE, key = "#p0", condition = "@repositoriesCacheProperties.theBigEntityRepoActive")
	TheBigEntity_ findOne(UUID oid);
	
	/**
	 * Create or update a TheBigEntity_.
	 * <p>
	 * If the oid already exists, the TheBigEntity_ will be overridden, hence update.
	 * If the oid does no already exist, a new TheBigEntity_ will be created, hence create.
	 * </p>
	 *
	 * @param theBigEntity The TheBigEntity_ that will be saved.
	 * @return the saved TheBigEntity_.
	 */
	@Override
	@CachePut(value = CACHE, key = "#p0.oid", condition = "@repositoriesCacheProperties.theBigEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_WRITE_TheBigEntity.name(),'Entitlements')")
	<S extends TheBigEntity_> S save(S theBigEntity);
	
	/**
	 * Delete the TheBigEntity_ by a specified oid.
	 *
	 * @param oid the unique oid of the TheBigEntity_ that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, key = "#p0", condition = "@repositoriesCacheProperties.theBigEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_TheBigEntity.name(),'Entitlements')")
	void delete(UUID oid);
	
	/**
	 * Delete a TheBigEntity_ by entity.
	 *
	 * @param entity The TheBigEntity_ that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, key = "#p0.oid", condition = "@repositoriesCacheProperties.theBigEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_TheBigEntity.name(),'Entitlements')")
	void delete(TheBigEntity_ entity);
	
	/**
	 * Delete multiple TheBigEntity_ entities by their oid.
	 *
	 * @param entities The Iterable of TheBigEntity_ entities that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, allEntries = true, condition = "@repositoriesCacheProperties.theBigEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_TheBigEntity.name(),'Entitlements')")
	void delete(Iterable<? extends TheBigEntity_> entities);
	
	/**
	 * Delete all TheBigEntity_ entities.
	 */
	@Override
	@CacheEvict(value = CACHE, allEntries = true, condition = "@repositoriesCacheProperties.theBigEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_TheBigEntity.name(),'Entitlements')")
	void deleteAll();
	
	List<TheBigEntity_> findByAttribute01(@Param(value= "attribute01") String attribute01);
	List<TheBigEntity_> findByAttribute02(@Param(value= "attribute02") String attribute02);
	
	
	/**
	 * Find the TheBigEntity_ entities with a firstRelationMtm relation to the FirstRealtionEntity with the given oid.
	 * @param oid the unique oid of the FirstRealtionEntity that will be searched for in the firstRelationMtm relation.
	 */
	java.util.Set<TheBigEntity_> findByFirstRelationMtmOid(@Param(value = "oid") UUID oid);
	/**
	 * Find the TheBigEntity_ with a secondRelationOtm relation to the SecondRealtionEntity with the given oid.
	 * @param oid the unique oid of the SecondRealtionEntity that will be searched for in the secondRelationOtm relation.
	 */
	TheBigEntity_ findBySecondRelationOtmOid(@Param(value = "oid") UUID oid);
	/**
	 * Find the TheBigEntity_ entities with a secondRelationMtm relation to the SecondRealtionEntity with the given oid.
	 * @param oid the unique oid of the SecondRealtionEntity that will be searched for in the secondRelationMtm relation.
	 */
	java.util.Set<TheBigEntity_> findBySecondRelationMtmOid(@Param(value = "oid") UUID oid);
	/**
	 * Find the TheBigEntity_ with a secondRelationOto relation to the SecondRealtionEntity with the given oid.
	 * @param oid the unique oid of the SecondRealtionEntity that will be searched for in the secondRelationOto relation.
	 */
	TheBigEntity_ findBySecondRelationOtoOid(@Param(value = "oid") UUID oid);
	/**
	 * Find the TheBigEntity_ entities with a secondRelationMto relation to the SecondRealtionEntity with the given oid.
	 * @param oid the unique oid of the SecondRealtionEntity that will be searched for in the secondRelationMto relation.
	 */
	java.util.Set<TheBigEntity_> findBySecondRelationMtoOid(@Param(value = "oid") UUID oid);
}
