/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.admin.thebackend.service.gen.rest.search;


import java.lang.reflect.Field;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import org.hibernate.search.exception.EmptyQueryException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.data.rest.webmvc.BasePathAwareController;
import org.springframework.data.rest.webmvc.PersistentEntityResource;
import org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler;
import org.springframework.hateoas.ExposesResourceFor;
import org.springframework.hateoas.Resources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.beans.factory.annotation.Value;

import de.muenchen.testproject.commons.exceptions.TooManyResultsException;
import de.muenchen.testproject.commons.exceptions.NoSearchableFieldException;
import de.muenchen.testproject.commons.domain.QueryService;
import de.muenchen.testproject.commons.domain.QueryUtil;
import de.muenchen.testproject.admin.thebackend.service.gen.domain.FirstLevelEntity_;
import de.muenchen.testproject.admin.thebackend.service.gen.domain.SecondLevelEntity_;
import de.muenchen.testproject.admin.thebackend.service.rest.FirstLevelEntity_Repository;
import de.muenchen.testproject.admin.thebackend.service.rest.SecondLevelEntity_Repository;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by Barrakuda.
 */
@BasePathAwareController
@ExposesResourceFor(FirstLevelEntity_.class)
@RequestMapping("/firstLevelEntitys/search")
public class FirstLevelEntity_SearchController {
		
    @Autowired
    private QueryService service;

    @Autowired
    private FirstLevelEntity_Repository repository;
    
    @Autowired
    private SecondLevelEntity_Repository secondLevelEntityRepository;

    @Value("${service.configuration.maxSearchResults}")
    private Integer maxSearchResults;

    @RequestMapping(method = RequestMethod.GET, value = "findFullTextFuzzy")
    @ResponseBody
    public ResponseEntity<?> findFullTextFuzzy(PersistentEntityResourceAssembler assembler, @Param("q") String q) {
        if (q == null)
            q = "";

		// Get all fields-names (including superclass fields) annotated with @Field (or embedded via @IndexedEmbedded)
		List<String> annotatedFields = new ArrayList<String>();
	    Class tmpClass = FirstLevelEntity_.class;
	    while (tmpClass != null) {
		    annotatedFields.addAll(QueryUtil.getIndexedFields(tmpClass));
		    tmpClass = tmpClass.getSuperclass();
	    }

        Stream<FirstLevelEntity_> firstLevelEntityStream;
        try {
            firstLevelEntityStream = service.query(q, FirstLevelEntity_.class, annotatedFields.toArray(new String[annotatedFields.size()])).stream();
        } catch (EmptyQueryException e) {
            firstLevelEntityStream = StreamSupport.stream(repository.findAll().spliterator(), false);
        }

        final List<PersistentEntityResource> collect = firstLevelEntityStream.map(assembler::toResource).collect(Collectors.toList());
        return new ResponseEntity<Object>(new Resources<>(collect), HttpStatus.OK);
	}

    @RequestMapping(method = RequestMethod.GET, value ="findFullTextJunction")
    @ResponseBody
    public ResponseEntity<?> findFullTextJunction(PersistentEntityResourceAssembler assembler, @Param("q") String q)  throws TooManyResultsException, NoSearchableFieldException {
        if (q == null)
            q = "";

        // Get all fields-names (including superclass fields) annotated with @Field (or embedded via @IndexedEmbedded)
        List<String> annotatedFields = new ArrayList<>();
        Class tmpClass = FirstLevelEntity_.class;
        while (tmpClass != null) {
            annotatedFields.addAll(QueryUtil.getIndexedFields(tmpClass));
            tmpClass = tmpClass.getSuperclass();
        }

        Stream<FirstLevelEntity_> firstLevelEntityStream;

        try {
            firstLevelEntityStream = service.queryJunction(q, FirstLevelEntity_.class, annotatedFields.toArray(new String[annotatedFields.size()])).stream();
        } catch (EmptyQueryException e) {
            firstLevelEntityStream = StreamSupport.stream(repository.findAll().spliterator(), false);
        }

        final Set<PersistentEntityResource> collect = firstLevelEntityStream.map(assembler::toResource).collect(Collectors.toSet());

		
		tmpClass = SecondLevelEntity_.class;
		Stream<SecondLevelEntity_> secondLevelEntityStream;
		annotatedFields.clear();
		annotatedFields.addAll(QueryUtil.getIndexedFields(tmpClass));
		try {
			secondLevelEntityStream = service.queryJunction(q, SecondLevelEntity_.class, annotatedFields.toArray(new String[annotatedFields.size()])).stream();
		} catch (EmptyQueryException e) {
			secondLevelEntityStream = StreamSupport.stream(secondLevelEntityRepository.findAll().spliterator(), false);
		}
		
		collect.addAll(secondLevelEntityStream.map(assembler::toResource).collect(Collectors.toList()));

        if (collect.size() > maxSearchResults) throw new TooManyResultsException(maxSearchResults);

        return new ResponseEntity<>(new Resources<>(collect), HttpStatus.OK);
    }

}


