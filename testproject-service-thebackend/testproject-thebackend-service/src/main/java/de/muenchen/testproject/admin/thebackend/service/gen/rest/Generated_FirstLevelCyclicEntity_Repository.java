/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.admin.thebackend.service.gen.rest;

import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.data.repository.NoRepositoryBean;
import java.util.List;
import java.util.UUID;
import org.springframework.security.access.prepost.PreAuthorize;

import de.muenchen.testproject.admin.thebackend.service.gen.domain.FirstLevelCyclicEntity_;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by Barrakuda.
 */
@NoRepositoryBean
public interface Generated_FirstLevelCyclicEntity_Repository extends CrudRepository<FirstLevelCyclicEntity_, UUID> { //NOSONAR
	/**
	 * Name for the specific cache.
	 */
	String CACHE = "FIRSTLEVELCYCLICENTITY_CACHE";
	
	/**
	 * Get all the FirstLevelCyclicEntity_ entities.
	 *
	 * @return an Iterable of the FirstLevelCyclicEntity_ entities with the same Tenancy.
	 */
	@Override
	Iterable<FirstLevelCyclicEntity_> findAll();
	
	/**
	 * Get one specific FirstLevelCyclicEntity_ by its unique oid.
	 *
	 * @param oid The identifier of the FirstLevelCyclicEntity_.
	 * @return The FirstLevelCyclicEntity_ with the requested oid.
	 */
	@Override
	@Cacheable(value = CACHE, key = "#p0", condition = "@repositoriesCacheProperties.firstLevelCyclicEntityRepoActive")
	FirstLevelCyclicEntity_ findOne(UUID oid);
	
	/**
	 * Create or update a FirstLevelCyclicEntity_.
	 * <p>
	 * If the oid already exists, the FirstLevelCyclicEntity_ will be overridden, hence update.
	 * If the oid does no already exist, a new FirstLevelCyclicEntity_ will be created, hence create.
	 * </p>
	 *
	 * @param firstLevelCyclicEntity The FirstLevelCyclicEntity_ that will be saved.
	 * @return the saved FirstLevelCyclicEntity_.
	 */
	@Override
	@CachePut(value = CACHE, key = "#p0.oid", condition = "@repositoriesCacheProperties.firstLevelCyclicEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_WRITE_FirstLevelCyclicEntity.name(),'Entitlements')")
	<S extends FirstLevelCyclicEntity_> S save(S firstLevelCyclicEntity);
	
	/**
	 * Delete the FirstLevelCyclicEntity_ by a specified oid.
	 *
	 * @param oid the unique oid of the FirstLevelCyclicEntity_ that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, key = "#p0", condition = "@repositoriesCacheProperties.firstLevelCyclicEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_FirstLevelCyclicEntity.name(),'Entitlements')")
	void delete(UUID oid);
	
	/**
	 * Delete a FirstLevelCyclicEntity_ by entity.
	 *
	 * @param entity The FirstLevelCyclicEntity_ that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, key = "#p0.oid", condition = "@repositoriesCacheProperties.firstLevelCyclicEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_FirstLevelCyclicEntity.name(),'Entitlements')")
	void delete(FirstLevelCyclicEntity_ entity);
	
	/**
	 * Delete multiple FirstLevelCyclicEntity_ entities by their oid.
	 *
	 * @param entities The Iterable of FirstLevelCyclicEntity_ entities that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, allEntries = true, condition = "@repositoriesCacheProperties.firstLevelCyclicEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_FirstLevelCyclicEntity.name(),'Entitlements')")
	void delete(Iterable<? extends FirstLevelCyclicEntity_> entities);
	
	/**
	 * Delete all FirstLevelCyclicEntity_ entities.
	 */
	@Override
	@CacheEvict(value = CACHE, allEntries = true, condition = "@repositoriesCacheProperties.firstLevelCyclicEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_FirstLevelCyclicEntity.name(),'Entitlements')")
	void deleteAll();
	
	List<FirstLevelCyclicEntity_> findByText1(@Param(value= "text1") String text1);
	
	
	/**
	 * Find the FirstLevelCyclicEntity_ entities with a refToSecond relation to the SecondLevelCyclicEntity with the given oid.
	 * @param oid the unique oid of the SecondLevelCyclicEntity that will be searched for in the refToSecond relation.
	 */
	java.util.Set<FirstLevelCyclicEntity_> findByRefToSecondOid(@Param(value = "oid") UUID oid);
}
