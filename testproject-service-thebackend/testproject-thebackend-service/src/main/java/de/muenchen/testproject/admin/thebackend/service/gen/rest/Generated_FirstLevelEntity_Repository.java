/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.admin.thebackend.service.gen.rest;

import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.data.repository.NoRepositoryBean;
import java.util.List;
import java.util.UUID;
import org.springframework.security.access.prepost.PreAuthorize;

import de.muenchen.testproject.admin.thebackend.service.gen.domain.FirstLevelEntity_;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by Barrakuda.
 */
@NoRepositoryBean
public interface Generated_FirstLevelEntity_Repository extends CrudRepository<FirstLevelEntity_, UUID> { //NOSONAR
	/**
	 * Name for the specific cache.
	 */
	String CACHE = "FIRSTLEVELENTITY_CACHE";
	
	/**
	 * Get all the FirstLevelEntity_ entities.
	 *
	 * @return an Iterable of the FirstLevelEntity_ entities with the same Tenancy.
	 */
	@Override
	Iterable<FirstLevelEntity_> findAll();
	
	/**
	 * Get one specific FirstLevelEntity_ by its unique oid.
	 *
	 * @param oid The identifier of the FirstLevelEntity_.
	 * @return The FirstLevelEntity_ with the requested oid.
	 */
	@Override
	@Cacheable(value = CACHE, key = "#p0", condition = "@repositoriesCacheProperties.firstLevelEntityRepoActive")
	FirstLevelEntity_ findOne(UUID oid);
	
	/**
	 * Create or update a FirstLevelEntity_.
	 * <p>
	 * If the oid already exists, the FirstLevelEntity_ will be overridden, hence update.
	 * If the oid does no already exist, a new FirstLevelEntity_ will be created, hence create.
	 * </p>
	 *
	 * @param firstLevelEntity The FirstLevelEntity_ that will be saved.
	 * @return the saved FirstLevelEntity_.
	 */
	@Override
	@CachePut(value = CACHE, key = "#p0.oid", condition = "@repositoriesCacheProperties.firstLevelEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_WRITE_FirstLevelEntity.name(),'Entitlements')" +
			"or hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_WRITE_SecondLevelEntity.name(),'Entitlements')")
	<S extends FirstLevelEntity_> S save(S firstLevelEntity);
	
	/**
	 * Delete the FirstLevelEntity_ by a specified oid.
	 *
	 * @param oid the unique oid of the FirstLevelEntity_ that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, key = "#p0", condition = "@repositoriesCacheProperties.firstLevelEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_FirstLevelEntity.name(),'Entitlements')" +
			"or hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_SecondLevelEntity.name(),'Entitlements')")
	void delete(UUID oid);
	
	/**
	 * Delete a FirstLevelEntity_ by entity.
	 *
	 * @param entity The FirstLevelEntity_ that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, key = "#p0.oid", condition = "@repositoriesCacheProperties.firstLevelEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_FirstLevelEntity.name(),'Entitlements')" +
			"or hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_SecondLevelEntity.name(),'Entitlements')")
	void delete(FirstLevelEntity_ entity);
	
	/**
	 * Delete multiple FirstLevelEntity_ entities by their oid.
	 *
	 * @param entities The Iterable of FirstLevelEntity_ entities that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, allEntries = true, condition = "@repositoriesCacheProperties.firstLevelEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_FirstLevelEntity.name(),'Entitlements')" +
			"or hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_SecondLevelEntity.name(),'Entitlements')")
	void delete(Iterable<? extends FirstLevelEntity_> entities);
	
	/**
	 * Delete all FirstLevelEntity_ entities.
	 */
	@Override
	@CacheEvict(value = CACHE, allEntries = true, condition = "@repositoriesCacheProperties.firstLevelEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_FirstLevelEntity.name(),'Entitlements')" +
			"or hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_SecondLevelEntity.name(),'Entitlements')")
	void deleteAll();
	
	List<FirstLevelEntity_> findByText1(@Param(value= "text1") String text1);
	List<FirstLevelEntity_> findByText2(@Param(value= "text2") String text2);
	
	
}
