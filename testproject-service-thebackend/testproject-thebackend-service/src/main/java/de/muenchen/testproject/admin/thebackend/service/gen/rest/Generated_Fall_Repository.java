/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.admin.thebackend.service.gen.rest;

import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.data.repository.NoRepositoryBean;
import java.util.List;
import java.util.UUID;
import org.springframework.security.access.prepost.PreAuthorize;

import de.muenchen.testproject.admin.thebackend.service.gen.domain.Fall_;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by Barrakuda.
 */
@NoRepositoryBean
public interface Generated_Fall_Repository extends CrudRepository<Fall_, UUID> { //NOSONAR
	/**
	 * Name for the specific cache.
	 */
	String CACHE = "FALL_CACHE";
	
	/**
	 * Get all the Fall_ entities.
	 *
	 * @return an Iterable of the Fall_ entities with the same Tenancy.
	 */
	@Override
	Iterable<Fall_> findAll();
	
	/**
	 * Get one specific Fall_ by its unique oid.
	 *
	 * @param oid The identifier of the Fall_.
	 * @return The Fall_ with the requested oid.
	 */
	@Override
	@Cacheable(value = CACHE, key = "#p0", condition = "@repositoriesCacheProperties.fallRepoActive")
	Fall_ findOne(UUID oid);
	
	/**
	 * Create or update a Fall_.
	 * <p>
	 * If the oid already exists, the Fall_ will be overridden, hence update.
	 * If the oid does no already exist, a new Fall_ will be created, hence create.
	 * </p>
	 *
	 * @param fall The Fall_ that will be saved.
	 * @return the saved Fall_.
	 */
	@Override
	@CachePut(value = CACHE, key = "#p0.oid", condition = "@repositoriesCacheProperties.fallRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_WRITE_Fall.name(),'Entitlements')")
	<S extends Fall_> S save(S fall);
	
	/**
	 * Delete the Fall_ by a specified oid.
	 *
	 * @param oid the unique oid of the Fall_ that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, key = "#p0", condition = "@repositoriesCacheProperties.fallRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_Fall.name(),'Entitlements')")
	void delete(UUID oid);
	
	/**
	 * Delete a Fall_ by entity.
	 *
	 * @param entity The Fall_ that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, key = "#p0.oid", condition = "@repositoriesCacheProperties.fallRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_Fall.name(),'Entitlements')")
	void delete(Fall_ entity);
	
	/**
	 * Delete multiple Fall_ entities by their oid.
	 *
	 * @param entities The Iterable of Fall_ entities that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, allEntries = true, condition = "@repositoriesCacheProperties.fallRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_Fall.name(),'Entitlements')")
	void delete(Iterable<? extends Fall_> entities);
	
	/**
	 * Delete all Fall_ entities.
	 */
	@Override
	@CacheEvict(value = CACHE, allEntries = true, condition = "@repositoriesCacheProperties.fallRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_Fall.name(),'Entitlements')")
	void deleteAll();
	
	List<Fall_> findByText(@Param(value= "text") String text);
	
	
	/**
	 * Find the Fall_ entities with a references relation to the Fall with the given oid.
	 * @param oid the unique oid of the Fall that will be searched for in the references relation.
	 */
	java.util.Set<Fall_> findByReferencesOid(@Param(value = "oid") UUID oid);
}
