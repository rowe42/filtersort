/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.admin.thebackend.service.gen.rest;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.data.rest.webmvc.RepositoryRestController;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.ResourceSupport;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by Barrakuda.
 */
/**
 * This controller exposes an OPTIONS endpoint for each entity.
 */
@RepositoryRestController
public class OptionsController {

    /**
     * Resource without content.
     */
    class LinksResource extends ResourceSupport {

        public LinksResource() {
            // default ctor
        }

    }
    
    @RequestMapping(method = RequestMethod.OPTIONS, value = "/theBigEntitys")
    public @ResponseBody
    ResponseEntity<LinksResource> getTheBigEntitysOptions() {
        LinksResource links = new LinksResource();
        
        Link selfLink = linkTo(OptionsController.class)
                .slash("theBigEntitys").withSelfRel();
        links.add(selfLink);
        
        Link userServiceLinkSecondRealtionEntitys = linkTo(OptionsController.class)
        		.slash("secondRealtionEntitys").withRel("secondRealtionEntitys");
        links.add(userServiceLinkSecondRealtionEntitys);
        
        Link userServiceLinkFirstRealtionEntitys = linkTo(OptionsController.class)
        		.slash("firstRealtionEntitys").withRel("firstRealtionEntitys");
        links.add(userServiceLinkFirstRealtionEntitys);
        
        return new ResponseEntity<>(links, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.OPTIONS, value = "/firstRealtionEntitys")
    public @ResponseBody
    ResponseEntity<LinksResource> getFirstRealtionEntitysOptions() {
        LinksResource links = new LinksResource();
        
        Link selfLink = linkTo(OptionsController.class)
                .slash("firstRealtionEntitys").withSelfRel();
        links.add(selfLink);
        
        return new ResponseEntity<>(links, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.OPTIONS, value = "/secondRealtionEntitys")
    public @ResponseBody
    ResponseEntity<LinksResource> getSecondRealtionEntitysOptions() {
        LinksResource links = new LinksResource();
        
        Link selfLink = linkTo(OptionsController.class)
                .slash("secondRealtionEntitys").withSelfRel();
        links.add(selfLink);
        
        Link userServiceLinkTheBigEntitys = linkTo(OptionsController.class)
        		.slash("theBigEntitys").withRel("theBigEntitys");
        links.add(userServiceLinkTheBigEntitys);
        
        return new ResponseEntity<>(links, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.OPTIONS, value = "/dateEntitys")
    public @ResponseBody
    ResponseEntity<LinksResource> getDateEntitysOptions() {
        LinksResource links = new LinksResource();
        
        Link selfLink = linkTo(OptionsController.class)
                .slash("dateEntitys").withSelfRel();
        links.add(selfLink);
        
        return new ResponseEntity<>(links, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.OPTIONS, value = "/customEntitys")
    public @ResponseBody
    ResponseEntity<LinksResource> getCustomEntitysOptions() {
        LinksResource links = new LinksResource();
        
        Link selfLink = linkTo(OptionsController.class)
                .slash("customEntitys").withSelfRel();
        links.add(selfLink);
        
        return new ResponseEntity<>(links, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.OPTIONS, value = "/falls")
    public @ResponseBody
    ResponseEntity<LinksResource> getFallsOptions() {
        LinksResource links = new LinksResource();
        
        Link selfLink = linkTo(OptionsController.class)
                .slash("falls").withSelfRel();
        links.add(selfLink);
        
        return new ResponseEntity<>(links, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.OPTIONS, value = "/abstractEntitys")
    public @ResponseBody
    ResponseEntity<LinksResource> getAbstractEntitysOptions() {
        LinksResource links = new LinksResource();
        
        Link selfLink = linkTo(OptionsController.class)
                .slash("abstractEntitys").withSelfRel();
        links.add(selfLink);
        
        return new ResponseEntity<>(links, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.OPTIONS, value = "/firstLevelEntitys")
    public @ResponseBody
    ResponseEntity<LinksResource> getFirstLevelEntitysOptions() {
        LinksResource links = new LinksResource();
        
        Link selfLink = linkTo(OptionsController.class)
                .slash("firstLevelEntitys").withSelfRel();
        links.add(selfLink);
        
        return new ResponseEntity<>(links, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.OPTIONS, value = "/secondLevelEntitys")
    public @ResponseBody
    ResponseEntity<LinksResource> getSecondLevelEntitysOptions() {
        LinksResource links = new LinksResource();
        
        Link selfLink = linkTo(OptionsController.class)
                .slash("secondLevelEntitys").withSelfRel();
        links.add(selfLink);
        
        return new ResponseEntity<>(links, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.OPTIONS, value = "/firstLevelCyclicEntitys")
    public @ResponseBody
    ResponseEntity<LinksResource> getFirstLevelCyclicEntitysOptions() {
        LinksResource links = new LinksResource();
        
        Link selfLink = linkTo(OptionsController.class)
                .slash("firstLevelCyclicEntitys").withSelfRel();
        links.add(selfLink);
        
        Link userServiceLinkSecondLevelCyclicEntitys = linkTo(OptionsController.class)
        		.slash("secondLevelCyclicEntitys").withRel("secondLevelCyclicEntitys");
        links.add(userServiceLinkSecondLevelCyclicEntitys);
        
        return new ResponseEntity<>(links, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.OPTIONS, value = "/secondLevelCyclicEntitys")
    public @ResponseBody
    ResponseEntity<LinksResource> getSecondLevelCyclicEntitysOptions() {
        LinksResource links = new LinksResource();
        
        Link selfLink = linkTo(OptionsController.class)
                .slash("secondLevelCyclicEntitys").withSelfRel();
        links.add(selfLink);
        
        Link userServiceLinkFirstLevelCyclicEntitys = linkTo(OptionsController.class)
        		.slash("firstLevelCyclicEntitys").withRel("firstLevelCyclicEntitys");
        links.add(userServiceLinkFirstLevelCyclicEntitys);
        
        return new ResponseEntity<>(links, HttpStatus.OK);
    }
    
}
