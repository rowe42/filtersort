/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.admin.thebackend.service;

import de.muenchen.testproject.admin.thebackend.service.rest.TheBigEntity_Repository;
import de.muenchen.testproject.admin.thebackend.service.rest.FirstRealtionEntity_Repository;
import de.muenchen.testproject.admin.thebackend.service.rest.SecondRealtionEntity_Repository;
import de.muenchen.testproject.admin.thebackend.service.rest.DateEntity_Repository;
import de.muenchen.testproject.admin.thebackend.service.rest.CustomEntity_Repository;
import de.muenchen.testproject.admin.thebackend.service.rest.Fall_Repository;
import de.muenchen.testproject.admin.thebackend.service.rest.AbstractEntity_Repository;
import de.muenchen.testproject.admin.thebackend.service.rest.FirstLevelEntity_Repository;
import de.muenchen.testproject.admin.thebackend.service.rest.SecondLevelEntity_Repository;
import de.muenchen.testproject.admin.thebackend.service.rest.FirstLevelCyclicEntity_Repository;
import de.muenchen.testproject.admin.thebackend.service.rest.SecondLevelCyclicEntity_Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Profile;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;

/*
 * This file will NOT be overwritten by Barrakuda.
 * This file was automatically generated by Barrakuda.
 */
/**
 * This class can be used to persist some data into the connected database
 * as soon as the Spring context is loaded after the boot process.
 * To activate respectively to register this bean in the Spring context
 * set the favored profile within the annotation {@link Profile}.
 */
@Component
@Profile({"no-security"})
public class DatabaseFiller implements CommandLineRunner {

	private static final Logger LOG = LoggerFactory.getLogger(DatabaseFiller.class);

	@Autowired
	private TheBigEntity_Repository thebigentityRepository;
	
	@Autowired
	private FirstRealtionEntity_Repository firstrealtionentityRepository;
	
	@Autowired
	private SecondRealtionEntity_Repository secondrealtionentityRepository;
	
	@Autowired
	private DateEntity_Repository dateentityRepository;
	
	@Autowired
	private CustomEntity_Repository customentityRepository;
	
	@Autowired
	private Fall_Repository fallRepository;
	
	@Autowired
	private AbstractEntity_Repository abstractentityRepository;
	
	@Autowired
	private FirstLevelEntity_Repository firstlevelentityRepository;
	
	@Autowired
	private SecondLevelEntity_Repository secondlevelentityRepository;
	
	@Autowired
	private FirstLevelCyclicEntity_Repository firstlevelcyclicentityRepository;
	
	@Autowired
	private SecondLevelCyclicEntity_Repository secondlevelcyclicentityRepository;
	
    /**
     * {@inheritDoc}
     */
    @Override
    public void run(String... strings) throws Exception {

		LOG.info("{} was called after startup of the spring context.", this.getClass().getSimpleName());


        /*
         * Enter here the code to persist some data via the repositories given in the variables.
         */


    }

}
