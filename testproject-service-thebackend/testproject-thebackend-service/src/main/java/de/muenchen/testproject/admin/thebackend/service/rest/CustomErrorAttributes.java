/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.admin.thebackend.service.rest;

import de.muenchen.testproject.commons.exceptions.NoSearchableFieldException;
import de.muenchen.testproject.commons.exceptions.TooManyResultsException;
import org.springframework.boot.autoconfigure.web.DefaultErrorAttributes;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.servlet.ModelAndView;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/*
 * This file will NOT be overwritten by Barrakuda.
 * This file was automatically generated by Barrakuda.
 */
/**
 * The class adds additional attributes to the JSON error response
 * which are used by the frontend to show an appropriate error message.
 *
 * @author alexander.boxhorn
 */
@Component
public class CustomErrorAttributes extends DefaultErrorAttributes {

	private static final Logger LOG = LoggerFactory.getLogger(CustomErrorAttributes.class);

    private static final String FIELD_NAME = "fieldName";

    private static final String MAX_RESULTS = "maxResults";

    /**
     * Returns a {@link Map} of the error attributes. The map can be used as the model of
     * an error page {@link ModelAndView}, or returned as a {@link ResponseBody}.
     *
     * For {@link NoSearchableFieldException} and {@link TooManyResultsException} additional
     * attributes are added to the attributes in super class {@link DefaultErrorAttributes}.
     *
     * This method can extended by additional attributes.
     *
     * @param requestAttributes the source request attributes
     * @param includeStackTrace if stack trace elements should be included
     * @return a map of error attributes
     */
    @Override
    public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) {

        Map<String, Object> errorAttributes = super.getErrorAttributes(requestAttributes, includeStackTrace);
        Throwable throwable = getError(requestAttributes);

		if (throwable == null) {
            LOG.debug("Throwable is {}. No customized error attributes necessary.", throwable);
        } else if (throwable.getClass().equals(NoSearchableFieldException.class)) {
            errorAttributes.put(FIELD_NAME, ((NoSearchableFieldException)throwable).getFieldName());
        } else if (throwable.getClass().equals(TooManyResultsException.class)) {
            errorAttributes.put(MAX_RESULTS, ((TooManyResultsException)throwable).getMaxResults());
        }

		// Add here additional error attributes if necessary

        return errorAttributes;

    }

}
