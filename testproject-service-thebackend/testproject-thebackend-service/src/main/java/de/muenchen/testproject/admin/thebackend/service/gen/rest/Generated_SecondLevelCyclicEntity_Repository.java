/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.admin.thebackend.service.gen.rest;

import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.data.repository.NoRepositoryBean;
import java.util.List;
import java.util.UUID;
import org.springframework.security.access.prepost.PreAuthorize;

import de.muenchen.testproject.admin.thebackend.service.gen.domain.SecondLevelCyclicEntity_;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by Barrakuda.
 */
@NoRepositoryBean
public interface Generated_SecondLevelCyclicEntity_Repository extends CrudRepository<SecondLevelCyclicEntity_, UUID> { //NOSONAR
	/**
	 * Name for the specific cache.
	 */
	String CACHE = "SECONDLEVELCYCLICENTITY_CACHE";
	
	/**
	 * Get all the SecondLevelCyclicEntity_ entities.
	 *
	 * @return an Iterable of the SecondLevelCyclicEntity_ entities with the same Tenancy.
	 */
	@Override
	Iterable<SecondLevelCyclicEntity_> findAll();
	
	/**
	 * Get one specific SecondLevelCyclicEntity_ by its unique oid.
	 *
	 * @param oid The identifier of the SecondLevelCyclicEntity_.
	 * @return The SecondLevelCyclicEntity_ with the requested oid.
	 */
	@Override
	@Cacheable(value = CACHE, key = "#p0", condition = "@repositoriesCacheProperties.secondLevelCyclicEntityRepoActive")
	SecondLevelCyclicEntity_ findOne(UUID oid);
	
	/**
	 * Create or update a SecondLevelCyclicEntity_.
	 * <p>
	 * If the oid already exists, the SecondLevelCyclicEntity_ will be overridden, hence update.
	 * If the oid does no already exist, a new SecondLevelCyclicEntity_ will be created, hence create.
	 * </p>
	 *
	 * @param secondLevelCyclicEntity The SecondLevelCyclicEntity_ that will be saved.
	 * @return the saved SecondLevelCyclicEntity_.
	 */
	@Override
	@CachePut(value = CACHE, key = "#p0.oid", condition = "@repositoriesCacheProperties.secondLevelCyclicEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_WRITE_SecondLevelCyclicEntity.name(),'Entitlements')")
	<S extends SecondLevelCyclicEntity_> S save(S secondLevelCyclicEntity);
	
	/**
	 * Delete the SecondLevelCyclicEntity_ by a specified oid.
	 *
	 * @param oid the unique oid of the SecondLevelCyclicEntity_ that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, key = "#p0", condition = "@repositoriesCacheProperties.secondLevelCyclicEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_SecondLevelCyclicEntity.name(),'Entitlements')")
	void delete(UUID oid);
	
	/**
	 * Delete a SecondLevelCyclicEntity_ by entity.
	 *
	 * @param entity The SecondLevelCyclicEntity_ that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, key = "#p0.oid", condition = "@repositoriesCacheProperties.secondLevelCyclicEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_SecondLevelCyclicEntity.name(),'Entitlements')")
	void delete(SecondLevelCyclicEntity_ entity);
	
	/**
	 * Delete multiple SecondLevelCyclicEntity_ entities by their oid.
	 *
	 * @param entities The Iterable of SecondLevelCyclicEntity_ entities that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, allEntries = true, condition = "@repositoriesCacheProperties.secondLevelCyclicEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_SecondLevelCyclicEntity.name(),'Entitlements')")
	void delete(Iterable<? extends SecondLevelCyclicEntity_> entities);
	
	/**
	 * Delete all SecondLevelCyclicEntity_ entities.
	 */
	@Override
	@CacheEvict(value = CACHE, allEntries = true, condition = "@repositoriesCacheProperties.secondLevelCyclicEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_SecondLevelCyclicEntity.name(),'Entitlements')")
	void deleteAll();
	
	List<SecondLevelCyclicEntity_> findByText2(@Param(value= "text2") String text2);
	
	
	/**
	 * Find the SecondLevelCyclicEntity_ entities with a refToFirst relation to the FirstLevelCyclicEntity with the given oid.
	 * @param oid the unique oid of the FirstLevelCyclicEntity that will be searched for in the refToFirst relation.
	 */
	java.util.Set<SecondLevelCyclicEntity_> findByRefToFirstOid(@Param(value = "oid") UUID oid);
}
