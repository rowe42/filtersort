/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.admin.thebackend.service.gen.domain;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.Table;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import javax.persistence.OneToMany;
import javax.persistence.OrderColumn;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToOne;
import javax.persistence.ManyToOne;
import org.hibernate.search.annotations.Indexed;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Field;
import de.muenchen.testproject.commons.domain.BaseEntity;
import de.muenchen.testproject.commons.domain.ObjectToStringBridge;
import de.muenchen.testproject.admin.thebackend.service.gen.domain.validation.ConsistentTheBigEntity_;
import de.muenchen.testproject.admin.thebackend.service.services.persistence.TheBigEntity_PersistenceListener;


/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by Barrakuda.
 */
/**
 * This class represents a TheBigEntity_.
 * <p>
 * Only oid and reference will be stored in the database.
 * The entity's content will be loaded according to the reference variable.
 * </p>
 */
@Entity
@EntityListeners(value = TheBigEntity_PersistenceListener.class)
@Indexed
@Table(name = "thebigentity")
@ConsistentTheBigEntity_
// Definition of getter, setter, ...
@NoArgsConstructor
@Getter
@Setter
@ToString(callSuper = true)
@EqualsAndHashCode(callSuper = true, exclude = {"secondRelationMtm", "secondRelationMto", "secondRelationOtm", "secondRelationOto"})
public class TheBigEntity_ extends BaseEntity  {
	
	// ========= //
	// Variables //
	// ========= //
	
	@Column(name="attribute01", nullable=false, length=30)
	@Field
	@FieldBridge(impl = ObjectToStringBridge.class)
	@NotNull
	@Size(min=2, max=30)
	private String attribute01;
	
	
	@Column(name="attribute02", nullable=false, length=30)
	@Field
	@FieldBridge(impl = ObjectToStringBridge.class)
	@NotNull
	@Size(min=2, max=30)
	private String attribute02;
	
	// ================ //
	// Entity relations //
	// ================ //
	
	@OneToMany
	@JoinColumn(name = "fk_secondrelationotm_oid")
	@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "oid")
	private java.util.Set<SecondRealtionEntity_> secondRelationOtm = new java.util.HashSet<>();
	
	
	@ManyToMany
	@OrderColumn(name="order_index")
	@JoinTable(name = "thebigentity_secondrelationmtm", joinColumns = { @JoinColumn(name = "fk_thebigentity_oid")}, inverseJoinColumns = {@JoinColumn(name="fk_secondrelationmtm_oid")})
	@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "oid")
	private java.util.Set<SecondRealtionEntity_> secondRelationMtm = new java.util.HashSet<>();
	
	
	@OneToOne
	@JoinColumn(name = "fk_secondrelationoto_oid")
	@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "oid")
	private SecondRealtionEntity_ secondRelationOto;
	
	
	@ManyToOne
	@JoinColumn(name = "fk_secondrelationmto_oid")
	@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "oid")
	private SecondRealtionEntity_ secondRelationMto;
	
	
	@ManyToMany
	@OrderColumn(name="order_index")
	@JoinTable(name = "thebigentity_firstrelationmtm", joinColumns = { @JoinColumn(name = "fk_thebigentity_oid")}, inverseJoinColumns = {@JoinColumn(name="fk_firstrelationmtm_oid")})
	private java.util.Set<FirstRealtionEntity_> firstRelationMtm = new java.util.HashSet<>();
	
	
}
