/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.admin.thebackend.service.gen.rest;

import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.data.repository.NoRepositoryBean;
import java.util.List;
import java.util.UUID;
import org.springframework.security.access.prepost.PreAuthorize;

import de.muenchen.testproject.admin.thebackend.service.gen.domain.Gender_;
import de.muenchen.testproject.admin.thebackend.service.gen.domain.CustomEntity_;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by Barrakuda.
 */
@NoRepositoryBean
public interface Generated_CustomEntity_Repository extends CrudRepository<CustomEntity_, UUID> { //NOSONAR
	/**
	 * Name for the specific cache.
	 */
	String CACHE = "CUSTOMENTITY_CACHE";
	
	/**
	 * Get all the CustomEntity_ entities.
	 *
	 * @return an Iterable of the CustomEntity_ entities with the same Tenancy.
	 */
	@Override
	Iterable<CustomEntity_> findAll();
	
	/**
	 * Get one specific CustomEntity_ by its unique oid.
	 *
	 * @param oid The identifier of the CustomEntity_.
	 * @return The CustomEntity_ with the requested oid.
	 */
	@Override
	@Cacheable(value = CACHE, key = "#p0", condition = "@repositoriesCacheProperties.customEntityRepoActive")
	CustomEntity_ findOne(UUID oid);
	
	/**
	 * Create or update a CustomEntity_.
	 * <p>
	 * If the oid already exists, the CustomEntity_ will be overridden, hence update.
	 * If the oid does no already exist, a new CustomEntity_ will be created, hence create.
	 * </p>
	 *
	 * @param customEntity The CustomEntity_ that will be saved.
	 * @return the saved CustomEntity_.
	 */
	@Override
	@CachePut(value = CACHE, key = "#p0.oid", condition = "@repositoriesCacheProperties.customEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_WRITE_CustomEntity.name(),'Entitlements')")
	<S extends CustomEntity_> S save(S customEntity);
	
	/**
	 * Delete the CustomEntity_ by a specified oid.
	 *
	 * @param oid the unique oid of the CustomEntity_ that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, key = "#p0", condition = "@repositoriesCacheProperties.customEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_CustomEntity.name(),'Entitlements')")
	void delete(UUID oid);
	
	/**
	 * Delete a CustomEntity_ by entity.
	 *
	 * @param entity The CustomEntity_ that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, key = "#p0.oid", condition = "@repositoriesCacheProperties.customEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_CustomEntity.name(),'Entitlements')")
	void delete(CustomEntity_ entity);
	
	/**
	 * Delete multiple CustomEntity_ entities by their oid.
	 *
	 * @param entities The Iterable of CustomEntity_ entities that will be deleted.
	 */
	@Override
	@CacheEvict(value = CACHE, allEntries = true, condition = "@repositoriesCacheProperties.customEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_CustomEntity.name(),'Entitlements')")
	void delete(Iterable<? extends CustomEntity_> entities);
	
	/**
	 * Delete all CustomEntity_ entities.
	 */
	@Override
	@CacheEvict(value = CACHE, allEntries = true, condition = "@repositoriesCacheProperties.customEntityRepoActive")
	@PreAuthorize("hasPermission(T(de.muenchen.testproject.admin.thebackend.service.gen.security.ResourcesEnum).thebackend_DELETE_CustomEntity.name(),'Entitlements')")
	void deleteAll();
	
	List<CustomEntity_> findByText(@Param(value= "text") String text);
	List<CustomEntity_> findByName(@Param(value= "name") String name);
	List<CustomEntity_> findByTestGender(@Param(value= "testGender") Gender_ testGender);
	
	
}
