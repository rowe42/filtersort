/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.commons.unicode;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.Part;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.collect.Iterators;
import com.google.common.io.ByteStreams;


/*
 * This file will NOT be overwritten by Barrakuda.
 * This file was automatically generated by Barrakuda.
 */
/**
 * Wrapper für HttpServletRequest, der NFC-Konvertierung durchführt.
 * 
 * @see java.text.Normalizer
 */
class NfcRequest extends HttpServletRequestWrapper implements HttpServletRequest {

	private static final Logger LOG = LoggerFactory.getLogger(NfcRequest.class);

	private Map<String, List<String>> nfc(final Enumeration<String> original) {
		final HashMap<String, List<String>> converted = new HashMap<>();
		while (original.hasMoreElements()) {
			final String key = original.nextElement();
			
			final List<String> values = new ArrayList<>();
			final Enumeration<String> en = getOriginalRequest().getHeaders(key);
			while (en.hasMoreElements()) {
				values.add(Helper.nfc(en.nextElement()));
			}
			converted.put(Helper.nfc(key), values);
		}
		return converted;
	}

	private Cookie[] nfc(final Cookie[] original) {
		if (original == null)
			return null;
		
		final Cookie[] converted = new Cookie[original.length];
		for (int i = 0; i < original.length; i++) {
			converted[i] = new Cookie(Helper.nfc(original[i].getName()), Helper.nfc(original[i].getValue()));
			converted[i].setComment(Helper.nfc(original[i].getComment()));
			if (original[i].getDomain() != null) {
				// Avoiding NullPointerException
				converted[i].setDomain(Helper.nfc(original[i].getDomain()));
			}
			converted[i].setPath(Helper.nfc(original[i].getPath()));
		}
		return converted;
	}

	private void convert() {
		if (params != null)
			return;
		this.params = Helper.nfc(getRequest().getParameterMap());
		this.cookies = nfc(getOriginalRequest().getCookies());
		this.headers = nfc(getOriginalRequest().getHeaderNames());
	}

	private Map<String, String[]> params;
	private Cookie[] cookies;
	private Map<String, List<String>> headers;
	@SuppressWarnings("unused")
	private Set<String> contentTypes;

	public NfcRequest(final HttpServletRequest request, final Set<String> contentTypes) {
		super(request);
		this.params = null;
		this.cookies = null;
		this.headers = null;
		this.contentTypes = contentTypes;
	}

	@Override
	public Cookie[] getCookies() {
		convert();
		return this.cookies;
	}

	@Override
	public String getHeader(final String name) {
		convert();
		final List<String> values = headers.get(Helper.nfc(name));
		return (values == null) ? null : values.get(0);
	}

	@Override
	public Enumeration<String> getHeaders(final String name) {
		convert();
		final List<String> values = this.headers.get(Helper.nfc(name));
		return (values == null) ? Collections.emptyEnumeration() : Iterators.asEnumeration(values.iterator());
	}

	@Override
	public Enumeration<String> getHeaderNames() {
		convert();
		return Iterators.asEnumeration(this.headers.keySet().iterator());
	}

	@Override
	public String getPathInfo() {
		convert();
		return Helper.nfc(getOriginalRequest().getPathInfo());
	}

	@Override
	public String getPathTranslated() {
		convert();
		return Helper.nfc(getOriginalRequest().getPathTranslated());
	}

	@Override
	public String getContextPath() {
		convert();
		return Helper.nfc(getOriginalRequest().getContextPath());
	}

	@Override
	public String getQueryString() {
		convert();
		return Helper.nfc(getOriginalRequest().getQueryString());
	}

	@Override
	public String getRemoteUser() {
		convert();
		return Helper.nfc(getOriginalRequest().getRemoteUser());
	}

	@Override
	public String getRequestedSessionId() {
		convert();
		return Helper.nfc(getOriginalRequest().getRequestedSessionId());
	}

	@Override
	public String getRequestURI() {
		convert();
		return Helper.nfc(getOriginalRequest().getRequestURI());
	}

	@Override
	public StringBuffer getRequestURL() {
		convert();
		return Helper.nfc(getOriginalRequest().getRequestURL());
	}

	@Override
	public void login(String username, String password) throws ServletException {
		// 
		// Do not touch password, since it may change hash of password.
		//
		getOriginalRequest().login(Helper.nfc(username), password);
	}

	@Override
	public String getParameter(final String name) {
		convert();
		final String[] values = this.params.get(Helper.nfc(name));
		return (values == null) ? null : values[0];
	}

	@Override
	public Map<String, String[]> getParameterMap() {
		convert();
		return this.params;
	}

	@Override
	public Enumeration<String> getParameterNames() {
		convert();
		return Iterators.asEnumeration(this.params.keySet().iterator());
	}

	@Override
	public String[] getParameterValues(final String name) {
		convert();
		return this.params.get(Helper.nfc(name));
	}

	@Override
	public BufferedReader getReader() throws IOException {
		LOG.debug("getReader()");
		return new BufferedReader(new NfcReader(getOriginalRequest().getReader()));
	}

	@Override
	public String getRemoteHost() {
		return Helper.nfc(getRequest().getRemoteHost());
	}
	
	@Override
	public Part getPart(final String name) throws IOException, ServletException {
		LOG.debug("getPart({})",name);
		return getOriginalRequest().getPart(name);
	}

	@Override
	public Collection<Part> getParts() throws IOException, ServletException {
		LOG.debug("getParts()");
		return getOriginalRequest().getParts();
	}
	
	@Override
	public ServletInputStream getInputStream() throws IOException {
		
		final String encoding = getOriginalRequest().getCharacterEncoding();
		
		String content = null; 
		try (final InputStream is = getOriginalRequest().getInputStream()) {
			content = new String(ByteStreams.toByteArray(is), encoding);
		}

		LOG.debug("getInputStream(): \"{}\".",content);
		return new NfcServletInputStream(new ByteArrayInputStream(Helper.nfc(content).getBytes()));
	}

	private HttpServletRequest getOriginalRequest() {
		return (HttpServletRequest) getRequest();
	}

}
