/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.commons.authorization;

import de.muenchen.testproject.commons.authorization.model.Permissions;
import static java.util.concurrent.TimeUnit.MINUTES;
import javax.cache.CacheManager;
import javax.cache.configuration.MutableConfiguration;
import javax.cache.expiry.Duration;
import javax.cache.expiry.TouchedExpiryPolicy;
import org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer;


/*
 * This file will NOT be overwritten by Barrakuda.
 * This file was automatically generated by Barrakuda.
 */
/**
 * Klasse wird ben√∂tigt, wenn Cache umgestellt wird bspw. auf EHCache.
 * @author roland
 */
public class CachingSetup implements JCacheManagerCustomizer {

	@Override
    public void customize(CacheManager cacheManager) {

        cacheManager.createCache("permissionsCache", new MutableConfiguration<String, Permissions>()
                .setExpiryPolicyFactory(TouchedExpiryPolicy.factoryOf(new Duration(MINUTES, 7)))
                .setStoreByValue(false)
                .setStatisticsEnabled(false));

        cacheManager.createCache("KEEPER_CACHE", new MutableConfiguration<String, Permissions>()
                .setExpiryPolicyFactory(TouchedExpiryPolicy.factoryOf(new Duration(MINUTES, 60)))
                .setStoreByValue(false)
                .setStatisticsEnabled(false));

        cacheManager.createCache("ANIMAL_CACHE", new MutableConfiguration<String, Permissions>()
                .setExpiryPolicyFactory(TouchedExpiryPolicy.factoryOf(new Duration(MINUTES, 60)))
                .setStoreByValue(false)
                .setStatisticsEnabled(false));

        cacheManager.createCache("ENCLOSURE_CACHE", new MutableConfiguration<String, Permissions>()
                .setExpiryPolicyFactory(TouchedExpiryPolicy.factoryOf(new Duration(MINUTES, 60)))
                .setStoreByValue(false)
                .setStatisticsEnabled(false));

	}

}
