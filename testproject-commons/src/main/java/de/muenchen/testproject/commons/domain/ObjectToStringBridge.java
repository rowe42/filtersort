/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.commons.domain;


import org.hibernate.search.bridge.StringBridge;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;


/*
 * This file will NOT be overwritten by Barrakuda.
 * This file was automatically generated by Barrakuda.
 */
public class ObjectToStringBridge implements StringBridge {

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE;

    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ISO_LOCAL_TIME;

    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME;

    /**
     * Converts the object representation to a string.
     *
     * If the object is of type LocalDate, LocalTime or LocalDateTime the
     * string representation given in the static variables will be returned.
     *
     * @param object The object to transform into a string representation.
     * @return String representation of the given object to be stored in Lucene index. The return string must not be
     * <code>null</code>. It can be empty though.
     */
    @Override
    public String objectToString(Object object) {
        if (object == null)
            return "";

        if (object instanceof TemporalAccessor)
            return getDateTimeString((TemporalAccessor) object);

        return object.toString();
    }

    /**
     * Transform the date given in the parameter into a String representation for searching purposes.
     *
     * @param temporalAccessor Should be a LocalDate, LocalTime or LocalDateTime object.
     *                         Otherwise a {@link IllegalArgumentException} will be thrown.
     * @return The searchable String.
     */
    private String getDateTimeString(TemporalAccessor temporalAccessor) {
        final String dateString;

        if (temporalAccessor == null) {
            throw new IllegalArgumentException("Can't calculate String for null date.");
        } else if (temporalAccessor.getClass().equals(LocalDate.class)) {
            dateString = ((LocalDate) temporalAccessor).format(DATE_FORMATTER);
        } else if (temporalAccessor.getClass().equals(LocalTime.class)) {
            dateString = ((LocalTime) temporalAccessor).format(TIME_FORMATTER);
        } else if (temporalAccessor.getClass().equals(LocalDateTime.class)) {
        	dateString = ((LocalDateTime) temporalAccessor).format(DATE_TIME_FORMATTER);
        } else {
            throw new IllegalArgumentException("It's not a LocalDate, LocalTime or LocalDateTime object");
        }

        return dateString;
    }

}
