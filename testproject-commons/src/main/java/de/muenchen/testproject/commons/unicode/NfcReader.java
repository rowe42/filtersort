/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.commons.unicode;

import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.Reader;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/*
 * This file will NOT be overwritten by Barrakuda.
 * This file was automatically generated by Barrakuda.
 */
/**
 * <p>Wrapper für Reader der eine NFC-Konvertierung durchführt.</p>
 * 
 * <p><strong>Achtung:</strong><ul>
 *    <li>Bei Java-Readern und -Writern kann gefahrlos eine NFC-Konvertierung
 *        durchgeführt werden, da dort Zeichen verarbeitet werden.</li>
 *    <li>Dieser Reader liest bei vor dem Lesen des ersten Zeichens denn vollständig Text des 
 *        gewrappten Readers in einern internen Buffer und führt darauf die NFC-Normalisierung 
 *        durch. Grund ist, dass NFC-Konvertierung kann nicht auf Basis von einzelnen Zeichen 
 *        durchgeführt werden kann. Dies kann zu erhöhter Latenz führen.</li>
 * </ul></p>
 */
class NfcReader extends Reader {

	private static final Logger LOG = LoggerFactory.getLogger(NfcReader.class);

	private CharArrayReader converted;

	private Reader original;

	private void convert() {
	
		if (converted != null)
			return;
		
		LOG.debug("Converting reader data to NFC.");
		try {
			try {
				final CharArrayWriter buffer = new CharArrayWriter();
				final char[] data = new char[16384];
				int read = original.read(data, 0, data.length);
				while (read != -1) {
					buffer.write(data, 0, read);
					read = original.read(data, 0, data.length);
				}
				buffer.flush();
				
				final String convertedContent = Helper.nfc(buffer.toString());
				LOG.debug("Converted to NFC: \"{}\".",convertedContent);
				converted = new CharArrayReader(convertedContent.toCharArray());
				
			} finally {
				if (original != null)
					original.close();
			}
			
		} catch (final IOException e) {
			throw new RuntimeException(e);

		}
	}	
	
	public NfcReader(final Reader original) {
		this.original = original;
		this.converted = null;
	}

	@Override
	public int read() throws IOException {
		convert();
		return converted.read();
	}

	@Override
	public int read(char[] cbuf, int off, int len) throws IOException {
		convert();
		return converted.read(cbuf, off, len);
	}

	@Override
	public void close() throws IOException {
		// Nothing to do
	}

	@Override
	public long skip(long n) throws IOException {
		convert();		
		return converted.skip(n);
	}

	@Override
	public boolean ready() throws IOException {
		convert();		
		return converted.ready();
	}

	@Override
	public boolean markSupported() {
		convert();		
		return converted.markSupported();
	}

	@Override
	public void mark(int readAheadLimit) throws IOException {
		convert();		
		converted.mark(readAheadLimit);
	}

	@Override
	public void reset() throws IOException {
		convert();		
		converted.reset();
	}

}
