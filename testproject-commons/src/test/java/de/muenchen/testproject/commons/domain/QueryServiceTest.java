/*
* Copyright (c): it@M - Dienstleister fuer Informations- und Telekommunikationstechnik
* der Landeshauptstadt Muenchen, 2018
*/
package de.muenchen.testproject.commons.domain;

import de.muenchen.testproject.commons.exceptions.NoSearchableFieldException;
import org.junit.Test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;


/*
 * This file will NOT be overwritten by Barrakuda.
 * This file was automatically generated by Barrakuda.
 */
public class QueryServiceTest {

    private static final String METHOD_NAME_GET_QUERIES = "getQueries";

    private static final String METHOD_NAME_CHECK_QUERY = "checkQuery";

    private String[] queryProperties = {"test1", "test2", "test3", "test4"};

    /**
     * The unit test for method {@link QueryService#getQueries(String, String[])}
     * to test against valid query strings.
     *
     * @throws NoSuchMethodException
     * @throws InvocationTargetException
     * @throws IllegalAccessException
     */
    @Test
    public void testGetQueries() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {

        ArrayList<String> expectedQueryResults = new ArrayList<>();
        expectedQueryResults.addAll(Arrays.asList("test1:\"test  test\"", "test2:xxxxx", "!§$%&/()=?", "\"12:12:12\"", "test1:12:12:12", "asdfgh12345"));

        Method method = QueryService.class.getDeclaredMethod(METHOD_NAME_GET_QUERIES, String.class, String[].class);
        method.setAccessible(true);

        // single space between queries
        String query = "test1:\"test  test\" test2:xxxxx !§$%&/()=? \"12:12:12\" test1:12:12:12 asdfgh12345";
        assertEquals(expectedQueryResults, Arrays.asList((String[]) method.invoke(new QueryService(), query, queryProperties)));

        // tabs between queries
        query = "\t\t\t\ttest1:\"test  test\"\t\t\ttest2:xxxxx\t\t\t!§$%&/()=?\t\t\t\t\"12:12:12\"\t\t\t\ttest1:12:12:12\t\t\tasdfgh12345\t\t\t";
        assertEquals(expectedQueryResults, Arrays.asList((String[]) method.invoke(new QueryService(), query, queryProperties)));

        // multiple spaces between queries
        query = "                   test1:\"test  test\"               test2:xxxxx              !§$%&/()=?          \"12:12:12\"           test1:12:12:12        asdfgh12345     ";
        assertEquals(expectedQueryResults, Arrays.asList((String[]) method.invoke(new QueryService(), query, queryProperties)));

    }

    /**
     * The method checks the query with a wrong property given in the query.
     *
     * @throws NoSuchMethodException
     * @throws InvocationTargetException
     * @throws IllegalAccessException
     * @throws NoSearchableFieldException
     */
    @Test(expected = NoSearchableFieldException.class)
    public void testGetQueriesFail01() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, NoSearchableFieldException {
        ArrayList<String> expectedQueryResults = new ArrayList<>();
        Method method = QueryService.class.getDeclaredMethod(METHOD_NAME_GET_QUERIES, String.class, String[].class);
        method.setAccessible(true);

        String query = "test5:xxxxxxxxxx";
        try {
            method.invoke(new QueryService(), query, queryProperties);
        } catch (InvocationTargetException ite) {
            handleReflectionNoSearchableFieldException(ite);
        }
    }

    /**
     * The method checks the {@code property:"Searchstring"} query with a {@code "} character in the searchstring.
     * NoSearchableFieldException is thrown because the search string is broken.
     *
     * @throws NoSuchMethodException
     * @throws InvocationTargetException
     * @throws IllegalAccessException
     * @throws NoSearchableFieldException
     */
    @Test(expected = NoSearchableFieldException.class)
    public void testGetQueriesFail02() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, NoSearchableFieldException {
        Method method = QueryService.class.getDeclaredMethod(METHOD_NAME_GET_QUERIES, String.class, String[].class);
        method.setAccessible(true);

        String query = "test5:\"xxx\"xxx\" \"second_correct_string\"";
        try {
            method.invoke(new QueryService(), query, queryProperties);
        } catch (InvocationTargetException ite) {
            handleReflectionNoSearchableFieldException(ite);
        }
    }

    /**
     * The method checks the {@code property:Searchstring} query with a {@code "} character in the searchstring.
     * NoSearchableFieldException is thrown because the search string is broken.
     *
     * @throws NoSuchMethodException
     * @throws InvocationTargetException
     * @throws IllegalAccessException
     * @throws NoSearchableFieldException
     */
    @Test(expected = NoSearchableFieldException.class)
    public void testGetQueriesFail03() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, NoSearchableFieldException {
        Method method = QueryService.class.getDeclaredMethod(METHOD_NAME_GET_QUERIES, String.class, String[].class);
        method.setAccessible(true);

        String query = "test5:xxx\"xxx \"second_correct_string\"";
        try {
            method.invoke(new QueryService(), query, queryProperties);
        } catch (InvocationTargetException ite) {
            handleReflectionNoSearchableFieldException(ite);
        }
    }

    /**
     * The method checks the {@code "searchstring"} query with a {@code "} character in the searchstring.
     * IllegalStateException is thrown because the search string is broken.
     *
     * @throws NoSuchMethodException
     * @throws InvocationTargetException
     * @throws IllegalAccessException
     * @throws IllegalStateException
     */
    @Test(expected = IllegalStateException.class)
    public void testGetQueriesFail04() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, NoSearchableFieldException {
        Method method = QueryService.class.getDeclaredMethod(METHOD_NAME_GET_QUERIES, String.class, String[].class);
        method.setAccessible(true);

        String query = "\"search\"string\" \"second_correct_string\"";
        try {
            method.invoke(new QueryService(), query, queryProperties);
        } catch (InvocationTargetException ite) {
            handleReflectionNoSearchableFieldException(ite);
        }
    }

    /**
     * The method checks the {@code searchstring} query with a {@code "} character in the searchstring.
     * IllegalStateException is thrown because the search string is broken.
     *
     * @throws NoSuchMethodException
     * @throws InvocationTargetException
     * @throws IllegalAccessException
     * @throws IllegalStateException
     */
    @Test(expected = IllegalStateException.class)
    public void testGetQueriesFail05() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, NoSearchableFieldException {
        Method method = QueryService.class.getDeclaredMethod(METHOD_NAME_GET_QUERIES, String.class, String[].class);
        method.setAccessible(true);

        String query = "search\"string \"second_correct_string\"";
        try {
            method.invoke(new QueryService(), query, queryProperties);
        } catch (InvocationTargetException ite) {
            handleReflectionNoSearchableFieldException(ite);
        }
    }

    /**
     * The unit test for method {@link QueryService#checkQuery(String, String[])}.
     *
     * @throws NoSuchMethodException
     * @throws InvocationTargetException
     * @throws IllegalAccessException
     * @throws NoSearchableFieldException This exception is expected in the last invocation of method {@link QueryService#checkQuery(String, String[])}.
     */
    @Test(expected = NoSearchableFieldException.class)
    public void testCheckQuery() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, NoSearchableFieldException {
        Method method = QueryService.class.getDeclaredMethod(METHOD_NAME_CHECK_QUERY, String.class, String[].class);
        method.setAccessible(true);

        String query = "test1:hello123";
        assertTrue((Boolean) method.invoke(new QueryService(), query, queryProperties));

        query = "test1:\"hello123\"";
        assertTrue((Boolean) method.invoke(new QueryService(), query, queryProperties));

        query = "test1:12:12:12";
        assertTrue((Boolean) method.invoke(new QueryService(), query, queryProperties));

        query = "!§$%&/()=?";
        assertTrue((Boolean) method.invoke(new QueryService(), query, queryProperties));

        query = "\"!§$%&/()=?\"";
        assertTrue((Boolean) method.invoke(new QueryService(), query, queryProperties));

        // NoSearchableFieldException expected due to not available query property
        query = "test5:\"!§$%&/()=?\"";
        try {
            method.invoke(new QueryService(), query, queryProperties);
        } catch (InvocationTargetException ite) {
            handleReflectionNoSearchableFieldException(ite);
        }
    }

    /**
     * Helper method to extract the {@NoSearchableFieldException} or {@IllegalStateException} from an {@InvocationTargetException}.
     * If {@InvocationTargetException} contains one of the above mentioned exceptions, the mentioned exception
     * will be thrown, otherwise {@InvocationTargetException} given in the parameter is thrown.
     *
     * @param ite The {@InvocationTargetException} to check against {@NoSearchableFieldException}
     *            for throwing the right exception.
     * @throws NoSearchableFieldException
     * @throws InvocationTargetException
     * @throws IllegalStateException
     */
    public static void handleReflectionNoSearchableFieldException(InvocationTargetException ite) throws NoSearchableFieldException, InvocationTargetException, IllegalStateException {
        if (ite.getTargetException().getClass().equals(NoSearchableFieldException.class)) {
            throw (NoSearchableFieldException) ite.getTargetException();
        } else if (ite.getTargetException().getClass().equals(IllegalStateException.class)) {
            throw (IllegalStateException) ite.getTargetException();
        }else {
            throw ite;
        }
    }

}
